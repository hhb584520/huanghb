tosca_definitions_version: tosca_simple_yaml_1_0
metadata:
  template_name: vsn1
  template_version: "1.0"
  template_author: onap
description: vsn1

imports:
  - onap_dm.yaml

node_types:
  onap.vsn1:
    derived_from: tosca.nodes.nfv.VNF
    properties:
      descriptor_id:
        type: string
        constraints: [ valid_values: [ b1bb0ce7-2222-4fa7-95ed-4840d70a1177 ] ]
        default: b1bb0ce7-2222-4fa7-95ed-4840d70a1177
      provider:
        type: string
        constraints: [ valid_values: [ onap ] ]
        default: onap
      product_name:
        type: string
        constraints: [ valid_values: [ vsn1_vsn2 ] ]
        default: vsn1
      software_version:
        type: string
        constraints: [ valid_values: [ '1.0' ] ]
        default: '1.0'
      descriptor_version:
        type: string
        constraints: [ valid_values: [ '1.0' ] ]
        default: '1.0'
      flavour_id:
        type: string
        constraints: [ valid_values: [ simple ] ]  #only one and only allowed one DF in this example
        default: simple
      flavour_description:
        type: string
        default: simple
      vnfm_info:
        type: list
        entry_schema:
          type: string
        default: ['gvnfm']

topology_template:
  inputs:
    vsn1_vsn2_private_net_id:
      type: string
      description: Private network that connects vsn1 to vsn2
      default: intelvsn1vsn201_private
    vsn1_vsn2_private_net_cidr:
      type: string
      description: The CIDR of the vsn2 private network
      default: 10.5.0.0/24
    vsn1_name_0:
      type: string
      description: Name of the vsn1
      default: intelvsn1
    vsn1_ip_addr:
      type: string
      description: IP address of vsn1
      default: 10.5.0.21
    vnf_id:
      type: string
      description: The VNF ID is provided by ONAP
      default: vsn1_demo_app
    vf_module_id:
      type: string
      description: The vsn1 ID is provided by ONAP
      default: Customer_vsn1

  node_templates:
    #Private network that connects vsn1 to vsn2
    VL_vsn1_vsn2_private_net:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocol: ipv4
        vl_profile:
          max_bit_rate_requirements:
            root: 10000000
            leaf: 10000000
          min_bit_rate_requirements:
            root: 10000000
            leaf: 10000000
          networkName: { get_input: vsn1_vsn2_private_net_id}
          cidr: { get_input: vsn1_vsn2_private_net_cidr }
          dhcpEnabled: false

    Cp_vsn1_vsn2_private_net:
      type: tosca.nodes.nfv.VduCp
      properties:
        layer_protocol: [ipv4]
        trunk_mode: false
        protocol_data:
          - asscociated_layer_protocol: ipv4
            address_data:
              address_type: ip_address
              l3_address_data:
                ip_address_assignment: false
                floating_ip_activated: false
                fixed_ip_address:
                  - { get_input: vsn1_ip_addr }
      requirements:
        - virtual_binding: VDU_vsn1_0
        - virtual_link: VL_vsn1_vsn2_private_net

    VirtualStorage_root_all:
      # this indicate the VDU root storage size
      type: tosca.nodes.nfv.Vdu.VirtualStorage
      properties:
        type_of_storage: root
        size_of_storage: 40 GB

    VDU_vsn1_0:
      type: tosca.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: vsn1_name_0 }
        description: vsn1
        configurable_properties:
          additional_vnfc_configurable_properties: {}
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
          watchdog: none
        inject_files: # TODO SDC BUG
          source_path: ../Artifacts/keys/authorized_keys #SSH authorized_keys
          dest_path: /home/ubuntu/.ssh/authorized_keys
        meta_data:
          vsn1_vsn2_private_net_cidr: { get_input: vsn1_vsn2_private_net_cidr }
          vsn1_ip_addr: { get_input: vsn1_ip_addr }

        user_data: |
          #!/bin/bash
          METADATA=`curl -s http://169.254.169.254/openstack/2012-08-10/meta_data.json`
          apt-get -y install jq

          get_metadata () {
            echo $METADATA | jq -r ".meta.$1"
          }

          # Create configuration files
          mkdir /opt/config
          echo "$(get_metadata vsn1_vsn2_private_net_cidr)" > /opt/config/vsn1_vsn2_private_net_cidr.txt
          echo "$(get_metadata vsn1_ip_addr)" > /opt/config/vsn1_ip_addr.txt

          # Download and run install script
          apt-get -y install unzip
          INSTALL_SCRIPT_VERSION=$(get_metadata install_script_version)
          NEXUS_ARTIFACT_REPO=$(get_metadata nexus_artifact_repo)
          if [[ "${INSTALL_SCRIPT_VERSION}" =~ "SNAPSHOT" ]]; then REPO=snapshots; else REPO=releases; fi
          curl -k -L "${NEXUS_ARTIFACT_REPO}/service/local/artifact/maven/redirect?r=${REPO}&g=org.onap.demo.vnf.vcpe&a=vcpe-scripts&e=zip&v=${INSTALL_SCRIPT_VERSION}" -o /opt/vcpe-scripts-${INSTALL_SCRIPT_VERSION}.zip
          unzip -j /opt/vcpe-scripts-${INSTALL_SCRIPT_VERSION}.zip -d /opt v_gw_install.sh
          cd /opt
          chmod +x v_gw_install.sh
      capabilities:
        virtual_compute:
          properties:
            #TODO add local disk size
            virtual_memory:
              virtual_mem_size: 4096 MB
              # HPA requirements
              vdu_memory_requirements:
                memoryPageSize: '{"schemaVersion": "0", "schemaSelector": "", "hardwarePlatform": "generic", "mandatory": "true", "configurationValue": "2 MB"}'
                numberOfPages: '{"schemaVersion": "0", "schemaSelector": "", "hardwarePlatform": "generic", "mandatory": "true", "configurationValue": "1024"}'
            virtual_cpu:
              num_virtual_cpu: 2
              cpu_architecture: generic
      requirements:
        - virtual_storage: VirtualStorage_root_all
      artifacts:
        sw_image: #TODO need to put glance image name here
          file: ../Artifacts/images/ubuntu_16.04
          type: tosca.artifacts.nfv.SwImage
